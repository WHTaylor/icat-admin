#!/usr/bin/env python

import argparse
import suds.client
import json
from tqdm import tqdm
from pprint import pprint
from pathlib import Path

_output_filename = "icatEntityStructure.ts"
_output_file = Path(__file__).parent.parent / "src" / _output_filename
_header = (
    "/**\n"
    " * This file is generated by the script in fetch_entity_structure and shouldn't be edited by hand\n"
    " *\n"
    " * Contains the names of all ICAT entities icat-admin can be used to access, and a map of their attributes and related entity types\n"
    " */\n\n"
    " /* eslint quote-props: 0 */\n"
)

def run(url):
    client = suds.client.Client(url)

    print("Fetching entity types")
    entity_names = client.service.getEntityNames()

    print("Fetching entity info")
    res = dict()
    for name in tqdm(entity_names):
        ei = client.service.getEntityInfo(name)
        res[name] = {
                "ones": [{"name": f.name, "type": f.type} for f in ei.fields if f.relType == "ONE"],
                "manys": [{"name": f.name, "type": f.type} for f in ei.fields if f.relType == "MANY"],
                "attributes": [f.name for f in ei.fields if f.relType == "ATTRIBUTE"],
        }
    entity_structure_map = json.dumps(res, sort_keys=True, indent=4)

    related_entity_type = 'type RelatedEntityField = { name: string; type: string; }'
    entity_type = 'type EntityStructure = { "ones": RelatedEntityField[]; "manys": RelatedEntityField[]; "attributes": string[] }'
    map_type = 'type EntityStructureMap = { [k: string]: EntityStructure }'

    lines = [
        _header + "\n",
        "export const entityNames = " + json.dumps(entity_names) + "\n\n",
        related_entity_type + "\n",
        "// Entities have three types of fields:\n",
        "// 'attributes' are scalar values\n",
        "// 'manys' and 'ones' are related entities with a one-many and X-one relationship, respectively\n",
        entity_type + "\n",
        map_type + "\n\n",
        "export const entityStructures: EntityStructureMap = " + entity_structure_map + "\n",
    ]
    with open(_output_file, "w") as f:
        f.writelines(lines)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            prog="fetch-entity-structure",
            description="Retrieves information about how ICAT entities are "
            "structured (their attributes and related entities) and puts it  "
            "into " + _output_filename + " in a format icat-admin can use")
    parser.add_argument(
            "server",
            help="The ICAT server to fetch entity structure information from. "
            "Can be the root URL of the server, or the full URL of the ICATService WSDL")
    args = parser.parse_args()

    url = args.server
    if not url.endswith("ICATService/ICAT?wsdl"):
        if not url.endswith("/"):
            url += "/"
        url += "ICATService/ICAT?wsdl"

    if not url.startswith("https://"):
        url = "https://" + url

    run(url)
